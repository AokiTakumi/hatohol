#!/usr/bin/env python
"""
  Copyright (C) 2013 Project Hatohol

  This file is part of Hatohol.

  Hatohol is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  Hatohol is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Hatohol. If not, see <http://www.gnu.org/licenses/>.
"""
import sys
import urllib2
import HatoholActionCreator

DEFAULT_PORT = 33194

def print_usage():
  print "Usage: "
  print ""
  print "  $ hatohol-voyager [--server address[:port]] command [options]"
  print ""
  print "* commands"
  print ""
  print "  show-triggers"
  print "  show-events"
  print "  show-items"
  print "  show-actions"
  print "  add-action"
  print "    --type command|resident"
  print "    --command COMMAND_DEFINITION"
  print "    [--working-dir   DIR]"
  print "    [--timeout       TIMEOUT]"
  print "    [--server-id     SERVER_ID]"
  print "    [--host-id       HOST_ID]"
  print "    [--host-group-id HOST_GROUP_ID]"
  print "    [--trigger-id    TRIGGER_ID]"
  print "    [--status        TRIGGER_STATUS]"
  print "    [--severity      TRIGGER_SEVERITY SEVERITY_COMPARATOR]"
  print ""

def parse_server_option(argv):
  if "--server" not in argv:
    return "http://localhost:%d" % DEFAULT_PORT
  idx = argv.index("--server")
  if idx == len(argv) - 1:
    print "--server: Not found server address"
    sys.exit(-1)
  
  server_arg = argv[idx + 1]
  words = server_arg.split(":")
  if len(words) >= 3:
    print "Invalid server option: " + server_arg
    sys.exit(-1)

  if len(words) == 1:
    server_name = server_arg
    port = DEFAULT_PORT
  else:
    server_name = words[0]
    port = int(words[1])
  
  print "Server: %s, port: %d" % (server_name, port)
  del argv[idx:idx+2]
  return "http://%s:%d" % (server_name, port)

def show_triggers(url, options):
  response = urllib2.urlopen(url + "/triggers.json")
  triggers_json = response.read()
  print triggers_json

def show_events(url, options):
  response = urllib2.urlopen(url + "/events.json")
  events_json = response.read()
  print events_json

def show_items(url, options):
  response = urllib2.urlopen(url + "/items.json")
  items_json = response.read()
  print items_json

def show_actions(url, options):
  response = urllib2.urlopen(url + "/actions.json")
  actions_json = response.read()
  print actions_json

def add_actions(url, options):
  action_creator = HatoholActionCreator.HatoholActionCreator(url)
  action_creator.add(options)

command_map = {
  "show-events":show_events,
  "show-triggers":show_triggers,
  "show-items":show_items,
  "show-actions":show_actions,
  "add-action":add_actions,
}

#
# main
#
url = parse_server_option(sys.argv)

if len(sys.argv) < 2:
  print_usage()
  sys.exit(-1)

command = sys.argv[1]
if command not in command_map:
  print "The command: %s is unknown !!!" % command
  print ""
  sys.exit(-1)

command_map[command](url, sys.argv[2:])

