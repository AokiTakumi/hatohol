#!/usr/bin/env python
import sys
import os
import argparse
import MySQLdb
from ctypes import *

sql_file_list = [
  {'table_name':'users', 'file_name':'init-user.sql'},
  {'table_name':'server_types', 'file_name':'server-type-zabbix.sql'},
  {'table_name':'server_types', 'file_name':'server-type-nagios.sql'},
  {'table_name':'server_types', 'file_name':'server-type-hapi-zabbix.sql'},
  {'table_name':'server_types', 'file_name':'server-type-hapi-json.sql'},
  {'table_name':'server_types', 'file_name':'server-type-ceilometer.sql'}]


def create_db_if_needed(cursor, args):
    cursor.execute('SHOW DATABASES')
    found = False
    for row in cursor.fetchall():
        if args.db_name in row:
            found = True
            break
    if found:
        print 'DB already exists: %s' % args.db_name
    else:
        cursor.execute('CREATE DATABASE %s' % args.db_name)
        cursor.execute('GRANT ALL PRIVILEGES ON %s.* TO %s@localhost IDENTIFIED BY \'%s\'' % (args.db_name, args.hatohol_db_user, args.hatohol_db_password))
        print 'Created DB: %s' % args.db_name
    cursor.execute('USE %s' % args.db_name)

def create_hatohol_tables(args):
    hatohol = cdll.LoadLibrary('libhatohol.so.0')
    ret = hatohol.createDBHatohol(c_char_p(args.db_name),
                                  c_char_p(args.db_user),
                                  c_char_p(args.db_password))
    if ret == -1:
        print 'Failed to create DBHatohol object'
        sys.exit(-1)

def execute_sql_statements_from_file(cursor, path):
    with open(path, 'r') as sql_file:
        for statement in sql_file:
            cursor.execute(statement)
    print 'Succeessfully loaded: %s' % path

def load_data_from_file(cursor, args, table_name, file_path):
    if table_name == 'users':
        cursor.execute('SELECT COUNT(*) FROM %s;' % table_name)
        num_rows = cursor.fetchall()[0][0]
        if num_rows > 0 and not args.force:
            print 'The number of rows in table: %s ' \
                'is not zero (%d)' % (table_name, num_rows)
            print 'Skip loading data: %s' % file_path
            print 'If you want to drop the existing table ' \
                'and load data, use -f or --force option.'
            return

        if num_rows > 0:
            cursor.execute('DELETE FROM %s' % table_name)
            print 'Deleted all rows in table: %s' % table_name

    execute_sql_statements_from_file(cursor, file_path)


def check_sql_file(args, sql_file_list):
    for sql_file in sql_file_list:
        path = sql_file['file_name']
        if not os.path.isfile(path):
            print 'Error: Not found: %s' % path
            print 'You can specifiy the SQL directory by --sql-dir option.'
            sys.exit(-1)

def add_sql_directory(args, sql_file_list):
    for sql_file in sql_file_list:
        sql_file['file_name'] = args.sql_dir + '/' + sql_file['file_name']

def start(args):

    add_sql_directory(args, sql_file_list)
    check_sql_file(args, sql_file_list)

    db = MySQLdb.connect(host=args.host,
                           user=args.db_user, passwd=args.db_password)
    cursor = db.cursor()
    create_db_if_needed(cursor, args)
    create_hatohol_tables(args)

    try:
        for sql_file in sql_file_list:
            if args.target and args.target != sql_file['table_name']:
                continue
            load_data_from_file(cursor, args,
                                sql_file['table_name'], sql_file['file_name'])
        db.commit()
    except:
        db.rollback()

    cursor.close()
    db.close()


def get_default_sql_dir():
    return os.path.dirname(__file__) + '/../share/hatohol/sql'


def get_table_name_list():
    table_name_list = []
    [table_name_list.append(elem['table_name']) for elem in sql_file_list]
    return table_name_list


if __name__ == '__main__':


    parser = argparse.ArgumentParser(description='Hatohol DB Initiator')
    parser.add_argument('db_name', type=str,
                        help='A database name to be initialized.')
    parser.add_argument('db_user', type=str,
                        help='A user for the database server.')
    parser.add_argument('db_password', default='', type=str,
                        help='A password for the database server. If the password is not set, give \'\' for this argument.')
    parser.add_argument('--host', default='localhost', type=str,
                        help='A database server.')
    parser.add_argument('--sql-dir', default=get_default_sql_dir(), type=str,
                        help='A directory that contains SQL files.')
    parser.add_argument('--hatohol-db-user', default='hatohol', type=str,
                        help='A user who is allowed to access the database.')
    parser.add_argument('--hatohol-db-password', default='hatohol', type=str,
                        help='A password that is used to access the database.')
    parser.add_argument('-f', '--force', action='store_true',
                        help='Delete existing data in a table before the initial data are inserted. By default, this tool skips to insert data if the table is not empty.')
    parser.add_argument('-t', '--target', choices=get_table_name_list(),
                        help='Only the specified table is initialized.')
    args = parser.parse_args()
    start(args)
